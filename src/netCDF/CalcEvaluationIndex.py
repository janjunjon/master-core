import time as Time
import numpy as np
from netCDF.NetCDF import NetCDF
from Module.Calculation import *

class Eval:
    def __init__(self, savePath, nc_correct_path) -> None:
        self.savePath = savePath
        self.nc_rains = NetCDF('/home/jjthomson/fdrive/nc/combined/rains_nomask.nc')
        self.nc_correct = NetCDF(nc_correct_path)

    def main(self):
        starttime = Time.time()

        RMSE1, FSS1, TS1 = self.calcEvalIndex_RA_MSMs()
        RMSE2, FSS2, TS2 = self.calcEvalIndex_Real_Correct()
        value1 = Calculation.welchT(RMSE1, RMSE2)
        value2 = Calculation.welchT(FSS1, FSS2)
        value3 = Calculation.welchT(TS1, TS2)
        self.RMSE1, self.RMSE2, self.FSS1, self.FSS2, self.TS1, self.TS2 = RMSE1, RMSE2, FSS1, FSS2, TS1, TS2
        self.value1 = value1
        self.value2 = value2
        self.value3 = value3
        print(value1, value2, value3)
        text = """
        <tkentei>
        tRMSE: {:.4f}
        tFSS: {:.4f}
        tTS: {:.4f}

        """.format(
            value1, value2, value3
        )
        text += f"""
        <RA-MSMs>
        RMSE: {np.mean(RMSE1)}
        FSS: {np.mean(FSS1)}
        TS: {np.mean(TS1)}

        <RA-Correct>
        RMSE: {np.mean(RMSE2)}
        FSS: {np.mean(FSS2)}
        TS: {np.mean(TS2)}
        
        <RA-MSMs all>
        RMSE: {RMSE1}
        FSS: {FSS1}
        TS: {TS1}

        <RA-Correct all>
        RMSE: {RMSE2}
        FSS: {FSS2}
        TS: {TS2}
        """
        with open(self.savePath, 'w') as f:
            f.write(text)

        elapsedtime = Time.time() - starttime
        print ("Elapsed time to calculate Evaluation Indexes: {0} [sec]".format(elapsedtime))

    def calcEvalIndex_Real_Correct(self):
        ALL1 = [1.588081087874918, 2.083314609114464, 1.9843044432406243, 2.104770582874542, 1.5099916513679446, 1.5553836640986882, 1.6628272134403583, 1.427229337877185, 1.3549518723142402, 2.0009305233672308, 1.7534509951717492, 1.272191208323709, 1.2842777709709146, 1.173241029782541, 1.297130684647834, 1.2913141247058435, 1.3818587945385592, 1.4854958925141455, 1.4609823254538046, 1.2649966360689426, 1.0930500151670857, 1.0321771159422317, 1.3281172744630552, 1.264179576175804, 1.6853354464967136, 1.38963457441369, 1.5690316018535682, 1.4950209569607789, 1.0752904200624425, 0.8567936853665212, 0.8610993762995157, 1.0865638179949804, 1.1054632982155663, 1.388418418850819, 1.4042572410222693, 1.17112130083708, 0.8882041236117915, 0.8439391468491892, 0.8313593576659444, 1.4561810175328715, 1.4712905386028745, 1.7882922786672555, 2.0303165343186818, 1.6411097680308855, 1.542162698866693, 1.4030186920173466, 1.3118593132359546, 1.252710966419612, 0.9617093038277216, 1.431491985463499, 1.6184880953405223, 1.460937421545771, 1.1696078614873984, 1.2530382278627659, 1.1639290281101722, 1.1840043918338796, 1.2918030123493953, 1.645112346829335, 1.8445305142861192, 1.5314801939534888, 1.5896552317281716, 1.5929790358063487, 1.6011072792618999, 1.392146166692505, 1.2125687319988903, 1.0917588629918964, 1.245199727897942, 1.2691580439880679, 1.3200226427143087, 1.229392812817065, 1.4054071784531466, 1.543725233371896, 1.4345191792993928, 1.1418506923519183, 1.5054338241738678, 1.7558531696218564, 1.2960238771773076, 1.2377886632091766, 1.1739886665014498, 1.0799627393921472, 1.1050329691862302, 1.3105709874410472, 1.3302395784962908, 1.1258528549109155, 1.1222562563201364, 0.9153304644323657, 0.9145865737348852, 1.3522863111892562, 1.451804467244069, 1.4096660066743172, 1.1824242216046257, 1.2880904520941636, 1.2660981828425661, 1.3802140173188353, 1.1424968563633158, 1.1610933210959284, 1.3310900168910798, 1.4932152660652644, 1.2570174334403788, 0.920413960415391, 0.897078393054215, 0.8329557583057089, 0.9883864687733938, 1.0344626628527662, 0.9015828248408763, 1.00459802632492, 1.2790440253622568, 1.5609412172802366, 1.2814844073408977, 1.6245012001773325, 1.5232603552204393, 1.2507455995537005, 1.3784780479332943, 1.2450087316965122, 1.1016289491001114, 0.7803996836319924, 0.731139165521665, 0.7346301779590396, 0.7009041490900177, 0.7889898879046864, 0.955481592731733, 1.2133732374473452, 1.6346962933610578, 1.6092912863212219, 1.2513486402207619, 1.2114591263024888, 1.5221509666207849, 1.15839226177865, 1.2049637932051724, 1.588457992176166, 1.8688880890484336, 1.8242935181611455, 1.6672056159308652, 1.3003130264816163, 1.265372565681287, 1.1634498419549022, 1.1420373995081143, 1.2893185596478882, 1.6252884848179416, 2.2360092997947927, 1.6935724249135318, 1.717998697623392, 1.3541224760414803, 1.1949727681769298, 1.2887332864767251, 1.468618368654112, 1.9190778062371545, 1.9853827607475203, 1.477996987660695, 1.3761322073353521, 1.5440864107561203, 1.3017815985764052, 1.0834499717903041, 1.047609551498581, 0.9216604346507183, 0.7373376898965566, 0.7479162663093593, 0.7436499640647578, 0.48921921830298554, 0.655688951346932, 0.9619565506951716, 1.0272076521609426, 1.0455488452378479, 0.839887249321788, 0.5500844943990895, 0.5702139214010928, 0.8240775847245511, 0.7957169719714277, 0.7011497992244973, 0.9504648677422506, 1.0933800650014467, 0.8116648302293846, 0.7232567930525342, 0.7889275245573255, 0.8809826436326126, 0.8809547186297697, 1.8903572529242376, 2.1927893187239493, 1.7067496231594779, 1.6539265637408902, 1.4386405327898053, 1.5143462453701853, 1.3724744885681088, 1.2249222908420256, 1.750638046712347, 1.6252077552271893, 1.6060012426743744, 1.4284526356910499, 1.1584630504112579, 0.9381597252862022, 1.1368773542370678, 1.332832334436315, 1.4826004447775454, 1.5277327952913544, 2.161724313279999, 1.6609472220136499, 1.1141527405140148, 1.4272063551181196, 1.068020983232784, 0.9583695063003277, 1.047429499415692, 1.2610491118430378, 1.2208116104896363, 1.1952540924273742, 1.207621802303132, 1.3026128446509142, 1.181091912199426, 1.2046438934157038, 1.0825943663496758, 1.311321622393304, 1.3156169960508404, 1.2307927671284733, 1.0075811884953194, 1.1149767745622752, 1.1575849654026917, 1.01888744816778, 1.041438822331069, 1.1675236790634964, 1.3355183033081675, 1.2892295134789633, 1.158519678203075, 1.029591846578565, 1.1180614932249089, 1.2235424283611775, 0.8462001223935728, 1.1091069601535553, 0.9227186138431402, 0.8532066319213824, 0.9672952218686803, 0.6039466958010173, 0.42358432375794486, 0.5646645434333512, 0.5745834406371062, 0.8101783096606817, 0.9581898015870254, 0.9023556115599923, 0.9775076962927106, 0.8392426021387478, 0.8403655311641902, 0.5244423435442916, 0.625844680388783, 0.7038113390654932, 0.6932694790959888, 0.6853583762158633, 0.6654710767982884, 0.9383607442204376, 0.4693551199177269, 0.6607098332886433]
        ALL2 = [0.09654178674351588, 0, 0, 0.04671857619577313, 1.1102230246251565e-16, 0.6075187969924811, 0.6131386861313869, 0.08999999999999997, 0.0, 0.4686311787072245, 0.0, 0.0, 0.0, 0.2093023255813955, 0, 0, 0.4183212996389891, 0.5231037489102006, 0.7484049930651873, 0.8298073886959267, 0.6703772418058132, 0.5992452830188679, 0.6411749810078501, 0.5852918877937832, 0.8029367595528116, 0.6372170071783545, 0.7495039682539683, 0.722597515798649, 0, 0.0, 0.25010317787866265, 0.0, 0.30284552845528445, 0.5869158878504672, 0.8833333333333333, 0.32283464566929143, 0.39913232104121477, 1.1102230246251565e-16, 0.27357032457496133, 0.4363376251788269, 0.3780342220453642, 0.7319068596601637, 0.763183125599233, 0.5612139917695473, 0.34538937764744215, 0.5818770226537218, 0.2548449612403101, 0.5066162570888468, 0.0, 0.16899892357373525, 0.09294075913444477, 0.376237623762376, 3.3306690738754696e-16, 0.0, 2.220446049250313e-16, 0, 0.2989228007181327, 0.7794994040524434, 0.7101888552110049, 0.3887015177065767, 0.3265465935787002, 0.48880039820806365, 0.5439877064925087, 0.4196185286103542, 0.645021645021645, 2.220446049250313e-16, 0.0, 0.35905511811023616, 1.1102230246251565e-16, 0.0, 1.1102230246251565e-16, 0, 0.0735826296743064, 0, 0.0, 0.2979683972911964, 1.1102230246251565e-16, 0.0, 0.0, 0.44781144781144766, 0.0, 0.22405816259087896, 0.6191640965649261, 0.46976142038098756, 0.2236503856041132, 2.220446049250313e-16, 0.0, 2.220446049250313e-16, 0, 0.7012594458438287, 0.292620865139949, 0.6666666666666667, 1.1102230246251565e-16, 0.0, 0.0, 0.0, 0.0, 2.220446049250313e-16, 0.0, 0, 0.6615186615186615, 0.25, 0.4423185143500282, 0.4507772020725389, 0.6218250235183442, 0.4353163361661946, 0.34829123328380396, 0.6870021371672819, 0.0, 0.7991543340380549, 1.1102230246251565e-16, 2.220446049250313e-16, 0, 3.3306690738754696e-16, 0, 0.0, 2.220446049250313e-16, 1.1102230246251565e-16, 1.1102230246251565e-16, 1.1102230246251565e-16, 0.6701977401129944, 0.5371179039301309, 0.0, 2.220446049250313e-16, 0.30263157894736836, 0, 0, 0.0, 1.1102230246251565e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0.0, 0.0, 0.0, 0.0, 2.220446049250313e-16, 2.220446049250313e-16, 1.1102230246251565e-16, 0.0, 0.0, 0, 0, 0.0, 0.0, 0, 0.0, 2.220446049250313e-16, 2.220446049250313e-16, 0.0, 0.0, 0.0, 2.220446049250313e-16, 2.220446049250313e-16, 0.0, 2.220446049250313e-16, 0.0, 1.1102230246251565e-16, 1.1102230246251565e-16, 0.0, 1.1102230246251565e-16, 0, 1.1102230246251565e-16, 0.4, 2.220446049250313e-16, 0, 0.0, 2.220446049250313e-16, 0.0, 2.220446049250313e-16, 1.1102230246251565e-16, 0.0, 0.0, 0.0, 0, 2.220446049250313e-16, 2.220446049250313e-16, 2.220446049250313e-16, 0.0, 0.0, 0.0, 0, 2.220446049250313e-16, 0.0, 0.0, 0.1550877192982456, 0.39859271523178796, 0.9103740296400847, 0.7881861575178998, 0.13673139158576042, 0.6775738228252195, 0.0, 0.2879464285714286, 0.44170771756978655, 0.0, 1.1102230246251565e-16, 0, 0.0, 0.11502347417840375, 0.6200317965023847, 0.27039627039627046, 2.220446049250313e-16, 0, 0, 0.5167173252279635, 0.8884799411115201, 0, 1.1102230246251565e-16, 2.220446049250313e-16, 0.0040567951318457585, 0.0, 0.1438142027690933, 0.4833394361039911, 0.7334410339256866, 0.5538037051635789, 0.8439393939393939, 0.5530514054190935, 0.0, 2.220446049250313e-16, 2.220446049250313e-16, 0.0, 2.220446049250313e-16, 2.220446049250313e-16, 2.220446049250313e-16, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-16, 0.33333333333333337, 0.0, 1.1102230246251565e-16, 2.220446049250313e-16, 3.3306690738754696e-16, 2.220446049250313e-16, 2.220446049250313e-16, 0.6177606177606177, 0.20170268500327437, 0.0, 2.220446049250313e-16, 2.220446049250313e-16, 2.220446049250313e-16, 0.0]
        ALL3 = [0.3863045738045738, 0.3123175715119673, 0.29465127238454286, 0.2839770145663504, 0.3207871310323286, 0.3389344262295082, 0.3202708247845712, 0.3717181022570244, 0.3773041474654378, 0.3419793966151582, 0.2705061082024433, 0.27349605996540455, 0.25346921075455336, 0.3131446707220312, 0.2589651022864019, 0.24609810479375696, 0.2738203266787659, 0.2580991203604377, 0.3069602537786901, 0.35701503221188263, 0.41806091806091805, 0.38083175005277603, 0.41467198581560283, 0.46749683410721826, 0.5280146163215591, 0.5147874306839186, 0.4385770750988142, 0.3514807589998227, 0.27150304083405735, 0.2330327479829141, 0.13359943648743836, 0.12336031258721741, 0.2496684350132626, 0.3051224944320713, 0.29938800489596085, 0.3435076307230423, 0.2732281492612071, 0.1976905311778291, 0.27446483180428133, 0.3377577625029628, 0.3820689655172414, 0.3695889982809814, 0.4678066914498141, 0.4608721624850657, 0.3945888966971188, 0.34584772488361615, 0.4028990281666941, 0.3025686448184234, 0.2649140546006067, 0.33664366268305, 0.28889990089197226, 0.3231479446032095, 0.2977908025247971, 0.3026315789473684, 0.3098368087035358, 0.3618181818181818, 0.3299742207640028, 0.419511249030256, 0.4074995557135241, 0.4117034207327661, 0.4114441416893733, 0.2664767331433998, 0.2277730736663844, 0.2320316921335597, 0.22513234884368905, 0.30810028929604627, 0.2955817094346903, 0.26635414447048794, 0.304576144036009, 0.3687657430730479, 0.3587108827650631, 0.37803067788223654, 0.36223747140777707, 0.35350257682763886, 0.33122857658307775, 0.3498713708195516, 0.39127918194096084, 0.36946315574607064, 0.29551954242135364, 0.2769325657894737, 0.2500511980339955, 0.3406060606060606, 0.36515327900659683, 0.28910243304027805, 0.21597139451728248, 0.1643871646501841, 0.23851141809980264, 0.27067883628066175, 0.25520231213872835, 0.3060267857142857, 0.2737510237510237, 0.21748699479791916, 0.14520894892359645, 0.1013215859030837, 0.11068293727253264, 0.13665674603174602, 0.21143146181082448, 0.2720839433870181, 0.353133769878391, 0.3719028145297089, 0.3423133959466139, 0.3886138613861386, 0.38279967159277506, 0.3463051128130822, 0.3741648106904232, 0.39765690376569035, 0.3994786575431737, 0.3482579221188712, 0.3152856246076585, 0.2795450799406626, 0.18686779059449868, 0.12481138176331105, 0.09896276143513008, 0.12874623160134777, 0.11360320933625091, 0.07521442709478778, 0.11685971685971686, 0.14812760055478502, 0.14385150812064965, 0.12307692307692308, 0.2171398527865405, 0.29595375722543354, 0.21496414033727468, 0.17663571582811488, 0.21488492148849214, 0.30116156282998946, 0.21865550127936728, 0.21700223713646533, 0.18864908073541167, 0.2916177046611829, 0.3621285418106427, 0.2540175310445581, 0.20026153558752102, 0.25195268913189023, 0.21008781805899573, 0.20757967269595176, 0.170098730606488, 0.23920627998255561, 0.2100823852491173, 0.22085653927405416, 0.29860096053455837, 0.3165075034106412, 0.2707774798927614, 0.17771812080536914, 0.17623536132533563, 0.1898652982681206, 0.19219269102990033, 0.19033069734004313, 0.10742776103527743, 0.06506986027944112, 0.044919786096256686, 0.03660526929354162, 0.022227772227772228, 0.00558659217877095, 0.007123070834982192, 0.003200393894633186, 0.006276747503566334, 0.024463806970509382, 0.026074182886522218, 0.021471312917986624, 0.062020264046668716, 0.10605074821080027, 0.1286153846153846, 0.13780598368087035, 0.14512119328775638, 0.13364674278038952, 0.23489308955686397, 0.2708333333333333, 0.2831120716270454, 0.2671348994914023, 0.22899334442595673, 0.19110070257611242, 0.15787781350482316, 0.14722141402385802, 0.20530035335689045, 0.20972515856236787, 0.15417929839757472, 0.10412871888281724, 0.11978559776275927, 0.16939890710382513, 0.16272126252932395, 0.17018698060941828, 0.15976027397260273, 0.13908092720618137, 0.16279620853080567, 0.251861306105084, 0.3393695506371563, 0.3274606530420484, 0.2259083728278041, 0.21510516252390058, 0.20178719866999167, 0.23035352398108533, 0.33364951387242114, 0.30512966117736134, 0.305591677503251, 0.306457182320442, 0.2492094861660079, 0.2129162462159435, 0.1421373084190636, 0.06985198649701377, 0.11144827586206897, 0.14026829842315838, 0.1441870534747781, 0.18279816513761468, 0.2726843100189036, 0.2573784722222222, 0.23860285779088228, 0.17620481927710843, 0.18080107406578652, 0.23121603897320592, 0.2251421546027355, 0.27822311289245155, 0.26258205689277897, 0.2707758356332413, 0.31552243538925007, 0.30616338439095553, 0.30002010858636635, 0.37397519445028377, 0.44369414101290966, 0.4120718462823726, 0.28582404917403, 0.2896798746362212, 0.24757529351710056, 0.15491949910554562, 0.14092734574662286, 0.15704183853859752, 0.14329361442102048, 0.1279673590504451, 0.13203266787658802, 0.16539263377345378, 0.07010135135135136, 0.01904761904761905, 0.031932773109243695, 0.0753516409912927, 0.134504695546804, 0.11160258591357605, 0.13359273670557717, 0.08424908424908426, 0.08093126385809313, 0.1534090909090909, 0.16594827586206898, 0.20352472996020465, 0.2013669821240799, 0.1613941018766756, 0.19730305180979418, 0.17317612380250552, 0.08110119047619048, 0.07626666666666666]
        return ALL1, ALL2, ALL3

    def calcEvalIndex_RA_MSMs(self):
        ALL1 = []
        ALL2 = []
        ALL3 = []
        rain_Ra = self.nc_rains.variables['rain_Ra'][:]
        rain_MSMs = self.nc_rains.variables['rain_MSMs'][:]
        for time in range(248):
            FSS = Calculation.FSS_(threshold=2, real=rain_Ra[time], pred=rain_MSMs[time])
            TS = Calculation.ThreatScore(real=rain_Ra[time], pred=rain_MSMs[time])
            rain1 = np.ravel(rain_Ra[time])
            rain2 = np.ravel(rain_MSMs[time])
            RMSE = Calculation.calcRMSE(rain1, rain2)
            ALL1.append(RMSE)
            ALL2.append(FSS)
            ALL3.append(TS)
        return ALL1, ALL2, ALL3

class EvalDEBUG:
    def __init__(self) -> None:
        self.savePath = '/home/jjthomson/fdrive/nc/predict/v3_eval/Rain/SDGRegressor/pattern1.txt'
        self.nc_rains = NetCDF('/home/jjthomson/fdrive/nc/combined/rains_nomask.nc')
        self.nc_correct = NetCDF('/home/jjthomson/fdrive/nc/predict/v3/Rain/SDGRegressor/pattern1.nc')

    def main(self):
        starttime = Time.time()

        RMSE1, FSS1, TS1 = self.calcEvalIndex_RA_MSMs()
        RMSE2, FSS2, TS2 = self.calcEvalIndex_Real_Correct()
        value1 = Calculation.welchT(RMSE1, RMSE2)
        value2 = Calculation.welchT(FSS1, FSS2)
        value3 = Calculation.welchT(TS1, TS2)
        self.RMSE1, self.RMSE2, self.FSS1, self.FSS2, self.TS1, self.TS2 = RMSE1, RMSE2, FSS1, FSS2, TS1, TS2
        self.value1 = value1
        self.value2 = value2
        self.value3 = value3
        print(value1, value2, value3)
        text = f"""
        <tkentei>
        tRMSE: {value1}
        tFSS: {value2}
        tTS: {value3}
        
        <RA-MSMs>
        RMSE: {RMSE1}
        FSS: {FSS1}
        TS: {TS1}

        <RA-Correct>
        RMSE: {RMSE2}
        FSS: {FSS2}
        TS: {TS2}
        """
        with open(self.savePath, 'w') as f:
            f.write(text)

        elapsedtime = Time.time() - starttime
        print ("Elapsed time to calculate Evaluation Indexes: {0} [sec]".format(elapsedtime))

    def debug(self):
        time = 0
        real = self.nc_rains.variables['rain_Ra'][:]
        correct = self.nc_correct.variables['rain'][:]
        FSS = Calculation.FSS_(threshold=2, real=real[time], pred=correct[time])
        print(FSS)
        self.FSS = FSS

    def calcEvalIndex_Real_Correct(self):
        ALL1 = []
        ALL2 = []
        ALL3 = []
        real = self.nc_rains.variables['rain_Ra'][:]
        correct = self.nc_correct.variables['rain'][:]
        for time in range(248):
            FSS = Calculation.FSS_(threshold=2, real=real[time], pred=correct[time])
            TS = Calculation.ThreatScore(real=real[time], pred=correct[time])
            rain1 = np.ravel(real[time])
            rain2 = np.ravel(correct[time])
            RMSE = Calculation.calcRMSE(rain1, rain2)
            ALL1.append(RMSE)
            ALL2.append(FSS)
            ALL3.append(TS)
        return ALL1, ALL2, ALL3

    def calcEvalIndex_RA_MSMs(self):
        ALL1 = []
        ALL2 = []
        ALL3 = []
        rain_Ra = self.nc_rains.variables['rain_Ra'][:]
        rain_MSMs = self.nc_rains.variables['rain_MSMs'][:]
        for time in range(248):
            FSS = Calculation.FSS_(threshold=2, real=rain_Ra[time], pred=rain_MSMs[time])
            TS = Calculation.ThreatScore(real=rain_Ra[time], pred=rain_MSMs[time])
            rain1 = np.ravel(rain_Ra[time])
            rain2 = np.ravel(rain_MSMs[time])
            RMSE = Calculation.calcRMSE(rain1, rain2)
            ALL1.append(RMSE)
            ALL2.append(FSS)
            ALL3.append(TS)
        return ALL1, ALL2, ALL3